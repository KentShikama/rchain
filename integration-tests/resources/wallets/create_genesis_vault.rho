// A set of testnet admin-controlled 'genesis vault'-s will be our approach for providing
// a testnet-token supply for the Testnet 1.
// Everything regarding the genesis vaults is subject to change.

new
  rl(`rho:registry:lookup`), RevVaultCh,
  vaultCh,
  stdout(`rho:io:stdout`), log
in {

  rl!(`rho:rchain:revVault`, *RevVaultCh) |
  for (@(_, RevVault) <- RevVaultCh) {


    match "%REV_ADDR" {
      revAddress => {

        log!(("Using RevAddress:", revAddress, "to obtain a `deployer's-revAddress-bound` vault")) |

        // so far, this call is not secured. This will be changed. Most likely, the method will disappear.
        @RevVault!("findOrCreateGenesisVault", revAddress, %INIT_VAULT_VALUE, *vaultCh ) |

        // most Vault methods return an `Either[String, A] = (false, String) \/ (true, A)`
        for (@(true, vault) <- vaultCh) {

          log!(("%LOG_MARKER Genesis vault created!")) |

          new balanceCh in {
            @vault!("balance", *balanceCh) |
            for (@balance <- balanceCh) {
              log!(("Genesis vault balance is", balance))
            }
          }
        }
      }
    }
  } |

  // for simplicity, we're sending to a public, forgable name obtained from quoting the "DEMO" process.
  contract log(@data) = {
    @"DEMO"!(data) | stdout!(data)
  }
}


