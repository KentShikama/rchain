// Match a list of known valid publicKey -> RevAddress pairs to bind them to veriables
match (
    "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111".hexToBytes(),
    "1111pdZDG4MZ3eBfaipaD22VXmbFY6PW9ZdGDWdEcXZz4gGxTxgn9",
    "2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222".hexToBytes(),
    "11112CXAkc8pV2AMHUSgHGbFkqovgyY9SRja4ZLSpRC9q7qYZx5SVc"
) {
  (
    alicePubKey,
    aliceRevAddress,
    bobPubKey,
    bobRevAddress
  ) => {
    new
      rl(`rho:registry:lookup`), RhoSpecCh,
      LockboxCh,
      setDeployData(`rho:test:deploy:set`),
      stdlog(`rho:io:stdlog`),
      setup,
      test_same_deployer, test_different_deployer,
      ackCh,
      protectedChannel
    in {
      stdlog!("info", "Starting Lockbox test") |
      rl!(`rho:id:zphjgsfy13h1k85isc8rtwtgt3t9zzt5pjd5ihykfmyapfc4wt3x5h`, *RhoSpecCh) |
      rl!(`rho:rchain:lockbox`, *LockboxCh) |
      for(@(_, RhoSpec) <- RhoSpecCh; @(_, Lockbox) <- LockboxCh) {
        stdlog!("info", "RhoSpec and Lockbox found") |
        @RhoSpec!("testSuite", *setup,
          [
            ("If the deployer is the same then the lockbox returns the protected channel", *test_same_deployer),
            ("If the deployer is different then the lockbox returns Nil", *test_different_deployer)
          ]) |

        contract setup(_, returnCh) = {
          new privateCh in {
            setDeployData ! ("userId", alicePubKey, *privateCh) |
            for (_ <- privateCh) {
              @Lockbox ! ("lock", aliceRevAddress, *protectedChannel, *returnCh)
            }
          }
        } |

        contract test_same_deployer(rhoSpec, box, ackCh) = {
          new retCh in {
            stdlog!("info", "Test same deployer...") |
            setDeployData ! ("userId", alicePubKey, *retCh) |
            for (_ <- retCh) {
              stdlog !("info", "Same userId set") |
              box !("unlock", *retCh) |
              rhoSpec!("assert",
                (*protectedChannel, "== <-", *retCh),
                "access should be allowed",
                *ackCh)
            }
          }
        } |

        contract test_different_deployer(rhoSpec, box, ackCh) = {
          new retCh in {
            stdlog!("info", "Test different deployer...") |
            setDeployData ! ("userId", bobPubKey, *retCh) |
            for (_ <- retCh) {
              stdlog !("info", "New userId set") |
              box !("unlock", *retCh) |
              rhoSpec!("assert",
                (Nil, "== <-", *retCh),
                "because access should be denied",
                *ackCh)
            }
          }
        }
      }
    }
  }
}
