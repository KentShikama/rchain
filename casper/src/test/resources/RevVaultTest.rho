// Match a list of known valid publicKey -> RevAddress pairs to bind them to veriables
match (
    "0000000000000000000000000000000000000000000000000000000000000000".hexToBytes(),
    "111123jwD7acNy6vfYwzWXAbnSQ8z8Bv24cCkVcVbd6SuP2LtFK7w7",
    "1111111111111111111111111111111111111111111111111111111111111111".hexToBytes(),
    "11112comWwT626KfXkvnWRHDwPDm4VefqSr6ijvinhVHGTuXe6wWmk",
    "2222222222222222222222222222222222222222222222222222222222222222".hexToBytes(),
    "11112ipm5NY9BqyQ3p3sUx8pdFWV5jFQ5qqMcUzZWe19hwz3USbHBG"
) {
  (
    genesisPubKey,
    genesisRevAddress,
    alicePubKey,
    aliceRevAddress,
    bobPubKey,
    bobRevAddress
  ) => {

    new
      rl(`rho:registry:lookup`),
      RhoSpecCh,
      ListOpsCh,
      stdout(`rho:io:stdout`),
      setDeployData(`rho:test:deploy:set`),
      setup,
      testFindOrCreateGenesisVault,
      testCreateVaultFail,
      testCreateAliceVaultLocked,
      testCreateAliceVaultUnlocked,
      testTransfer,
      testFindOrCreate,
      testTransferToSelf,
      testAmountNegative,
      testInsufficeintFunds,
      testInvalidRevAddress,
      withVaultUnlocked,
      transfer,
      assertBalances
    in {
      rl!(`rho:id:6wnujzcraztjfg941skrtbdkdgbko8nuaqihuhn15s66oz8ro5gwbb`, *RhoSpecCh) |
      for(@(_, RhoSpec) <- RhoSpecCh) {
        @RhoSpec!("testSuite", *setup,
          [
            ("Create genesis vault with expected balance", *testFindOrCreateGenesisVault),
            ("Return an error for invalid public key", *testCreateVaultFail),
            ("Create Alice vault and see it is locked", *testCreateAliceVaultLocked),
            ("Create Alice vault, unlock it and check balance", *testCreateAliceVaultUnlocked),
            ("Transfer from genesis to Alice", *testTransfer),
            ("Return the existing wallet when calling testFindOrCreate", *testFindOrCreate),
            ("Transfer to own account successfully", *testTransferToSelf),
            ("Fail the tranfer if the amount to transfer is negative", *testAmountNegative),
            ("Fail the transfer if there are insufficient funds", *testInsufficeintFunds),
            ("Fail the transfer if the destination addresss is not a valid RevAddress", *testInvalidRevAddress),
          ])
      } |

      contract setup(ret) = {
        new RevVaultCh, identitySet in {
          rl!(`rho:id:1o93uitkrjfubh43jt19owanuezhntag5wh74c6ur5feuotpi73q8z`, *RevVaultCh) |
          setDeployData!("userId", genesisPubKey, *identitySet) |
          for (@(_, RevVault) <- RevVaultCh; _ <- identitySet) {
            ret!(RevVault)
          }
        }
      } |

      contract testFindOrCreateGenesisVault(rhoSpec, RevVault, ackCh) = {
        new genesisVaultCh, balanceCh in {
          RevVault!("findOrCreateGenesisVault", genesisPubKey, 9000, *genesisVaultCh) |
          for (@("Right", genesisVault) <- genesisVaultCh) {
            // so far, access to genesisVault is not secured. This will be changd.
            @genesisVault!("balance", *balanceCh) |
            rhoSpec!("assert", (9000, "== <-", *balanceCh), "balance is as expected", *ackCh)
          }
        }
      } |

      contract testCreateVaultFail(rhoSpec, RevVault, ackCh) = {
        new e1 in {
          RevVault!("findOrCreate", "EEEE".hexToBytes(), *e1) |
          rhoSpec!("assertMany",
            [
              ((("Left", "Invalid public key"), "== <-", *e1), "should be a failure")
            ], *ackCh
          )
        }
      } |

      contract testCreateAliceVaultLocked(rhoSpec, RevVault, ackCh) = {
        new aliceVaultLockedCh, unlockFail in {
          RevVault!("findOrCreate", alicePubKey, *aliceVaultLockedCh) |
          for (@("Right", aliceVaultLocked) <- aliceVaultLockedCh) {
            @aliceVaultLocked!("unlock", *unlockFail) |
            rhoSpec!("assertMany",
              [
                ((Nil, "== <-", *unlockFail), "can't unlock without proper identity"),
              ], *ackCh
            )
          }
        }
      } |

      contract testCreateAliceVaultUnlocked(rhoSpec, RevVault, ackCh) = {
        new balanceCh, aliceVaultCh in {
          withVaultUnlocked!(alicePubKey, *aliceVaultCh) |
          for (aliceVault <- aliceVaultCh) {
            aliceVault!("balance", *balanceCh) |
            rhoSpec!("assertMany",
              [
                ((Nil, "!=", *aliceVault), "can unlock with proper identity"),
                ((0, "== <-", *balanceCh), "can check balance"),
              ], *ackCh
            )
          }
        }
      } |

      contract testTransfer(rhoSpec, RevVault, ackCh) = {
        new genesisVaultCh, aliceVaultCh, ret, retOk  in {
          RevVault!("findOrCreateGenesisVault", genesisPubKey, 9000, *genesisVaultCh) |
          withVaultUnlocked!(alicePubKey, *aliceVaultCh) |
          for (@("Right", genesisVault) <- genesisVaultCh; @aliceVault <- aliceVaultCh) {

            @genesisVault!("transfer", aliceRevAddress, 1000, *ret) |
            rhoSpec!("assert", (("Right", Nil), "== <-", *ret), "transfer successful", *retOk) |
            assertBalances!(*retOk, [(genesisVault, 8000), (aliceVault, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testFindOrCreate(rhoSpec, RevVault, ackCh) = {
        new genesisVaultCh, aliceVaultCh, now in {
          //the below attempts to create a wallet are going to fetch the ones created in previous tests.
          RevVault!("findOrCreateGenesisVault", genesisPubKey, 0 /* irrelevant */, *genesisVaultCh) |
          withVaultUnlocked!(alicePubKey, *aliceVaultCh) |
          for (@("Right", g) <- genesisVaultCh; @a <- aliceVaultCh) {
            now!(Nil) |
            assertBalances!(*now, [(g, 8000), (a, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testTransferToSelf(rhoSpec, RevVault, ackCh) = {
        new aliceVaultCh, now, balanceOk, transferResult, transferOk in {
          withVaultUnlocked!(alicePubKey, *aliceVaultCh) |
          for (@aliceVault <- aliceVaultCh) {
            now!(Nil) |
            assertBalances!(*now, [(aliceVault, 1000)], *rhoSpec, *balanceOk) |
            transfer!(*balanceOk, aliceVault, aliceRevAddress, 1000, *transferResult) |
            rhoSpec!("assert", (("Right", Nil), "== <-", *transferResult), "transfer successful", *transferOk) |
            assertBalances!(*transferOk, [(aliceVault, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testAmountNegative(rhoSpec, RevVault, ackCh) = {
        new aliceVaultCh, now, balanceOk, transferResult, transferOk in {
          withVaultUnlocked!(alicePubKey, *aliceVaultCh) |
          for (@aliceVault <- aliceVaultCh) {
            now!(Nil) |
            assertBalances!(*now, [(aliceVault, 1000)], *rhoSpec, *balanceOk) |
            transfer!(*balanceOk, aliceVault, bobRevAddress, -1, *transferResult) |
            rhoSpec!("assert", (("Left", "Amount must be non-negative"), "== <-", *transferResult), "transfer failed", *transferOk) |
            assertBalances!(*transferOk, [(aliceVault, 1000)], *rhoSpec, *ackCh)
          }
        }
      } |

      contract testInsufficeintFunds(rhoSpec, RevVault, ackCh) = {
        new aliceVaultCh, res in {
          withVaultUnlocked!(alicePubKey, *aliceVaultCh) |
          for (aliceVault <- aliceVaultCh) {
              aliceVault!("transfer", bobRevAddress, 9000, *res) |
              rhoSpec!("assert", (("Left", "Insufficient funds"), "== <-", *res), "transfer failed", *ackCh)
          }
        }
      } |

      contract testInvalidRevAddress(rhoSpec, RevVault, ackCh) = {
        stdout!("testInvalidRevAddress") |
        new aliceVaultCh, res in {
          withVaultUnlocked!(alicePubKey, *aliceVaultCh) |
          for (aliceVault <- aliceVaultCh) {
            aliceVault!("transfer", "pretty surely invalid rev address", 1, *res) |
            rhoSpec!("assert", (("Left", "Invalid Base58 encoding"), "== <-", *res), "transfer failed", *ackCh)
          }
        }
      } |

      new RevVaultCh in {
        rl!(`rho:id:1o93uitkrjfubh43jt19owanuezhntag5wh74c6ur5feuotpi73q8z`, *RevVaultCh) |
        for (@(_, RevVault) <- RevVaultCh) {

          contract withVaultUnlocked(@pubKey, ret) = {
            new vaultLockedCh, identityChanged in {
              setDeployData!("userId", pubKey, *identityChanged) |
              @RevVault!("findOrCreate", pubKey, *vaultLockedCh) |
              for (@("Right", vaultLocked) <- vaultLockedCh; _ <- identityChanged) {
                @vaultLocked!("unlock", *ret)
              }
            }
          }

        }
      } |

      contract transfer(when, vault, @address, @amount, ret) = {
        for (_ <- when) {
          vault!("transfer", address, amount, *ret)
        }
      } |

      rl!(`rho:id:dputnspi15oxxnyymjrpu7rkaok3bjkiwq84z7cqcrx4ktqfpyapn4`, *ListOpsCh) |
      for(@(_, ListOps) <- ListOpsCh) {

        contract assertBalances(when, @balances, rhoSpec, ret) = {
          for (_ <- when) {
            new assertBalance in {
              @ListOps!("foreach", balances, *assertBalance, *ret) |

              contract assertBalance(@(vault, expectedBalance), retCh) = {
                new balanceCh in {
                  @vault!("balance", *balanceCh) |
                  rhoSpec!("assert", (expectedBalance, "== <-", *balanceCh), "balance is as expected", *retCh)
                }
              }
            }
          }
        }

      }
    }
  }
}
